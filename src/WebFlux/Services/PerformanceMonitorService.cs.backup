using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Options;
using System.Collections.Concurrent;
using System.Diagnostics;
using System.Diagnostics.Metrics;
using WebFlux.Core.Interfaces;
using WebFlux.Core.Models;

namespace WebFlux.Services;

/// <summary>
/// OpenTelemetry 기반 성능 모니터링 서비스 구현
/// 메트릭 수집, 활동 추적, 성능 통계 분석 제공
/// </summary>
public class PerformanceMonitorService : IPerformanceMonitor
{
    private readonly ILogger<PerformanceMonitorService> _logger;
    private readonly WebFluxConfiguration _configuration;
    private readonly ActivitySource _activitySource;
    private readonly Meter _meter;

    // 메트릭 컬렉션
    private readonly ConcurrentDictionary<string, ChunkingMetrics> _chunkingMetrics;
    private readonly ConcurrentDictionary<string, ProcessingMetrics> _processingMetrics;
    private readonly ConcurrentDictionary<string, ResourceMetrics> _resourceMetrics;

    // 성능 카운터
    private readonly Counter<long> _requestCounter;
    private readonly Counter<long> _errorCounter;
    private readonly Histogram<double> _processingTimeHistogram;
    private readonly Histogram<double> _chunkQualityHistogram;
    private readonly ObservableGauge<double> _memoryUsageGauge;
    private readonly ObservableGauge<double> _cpuUsageGauge;

    private readonly Timer _metricsCollectionTimer;
    private volatile bool _disposed;

    public PerformanceMonitorService(
        ILogger<PerformanceMonitorService> logger,
        IOptions<WebFluxConfiguration> configuration)
    {
        _logger = logger ?? throw new ArgumentNullException(nameof(logger));
        _configuration = configuration?.Value ?? throw new ArgumentNullException(nameof(configuration));

        // OpenTelemetry 구성
        _activitySource = new ActivitySource("WebFlux.PerformanceMonitor");
        _meter = new Meter("WebFlux.Metrics", "1.0.0");

        // 컬렉션 초기화
        _chunkingMetrics = new ConcurrentDictionary<string, ChunkingMetrics>();
        _processingMetrics = new ConcurrentDictionary<string, ProcessingMetrics>();
        _resourceMetrics = new ConcurrentDictionary<string, ResourceMetrics>();

        // 메트릭 직접 초기화 (readonly 필드를 위해)
        _requestCounter = _meter.CreateCounter<long>(
            name: "webflux_requests_total",
            description: "Total number of requests processed");

        _errorCounter = _meter.CreateCounter<long>(
            name: "webflux_errors_total",
            description: "Total number of errors occurred");

        _processingTimeHistogram = _meter.CreateHistogram<double>(
            name: "webflux_processing_duration_ms",
            description: "Processing duration in milliseconds");

        _chunkQualityHistogram = _meter.CreateHistogram<double>(
            name: "webflux_chunk_quality_score",
            description: "Chunk quality score");

        _memoryUsageGauge = _meter.CreateObservableGauge<double>(
            name: "webflux_memory_usage_bytes",
            description: "Current memory usage in bytes",
            observeValue: () => GC.GetTotalMemory(false));

        _cpuUsageGauge = _meter.CreateObservableGauge<double>(
            name: "webflux_cpu_usage_percent",
            description: "Current CPU usage percentage",
            observeValue: () => GetCpuUsage());

        // 주기적 메트릭 수집 (30초 간격)
        _metricsCollectionTimer = new Timer(CollectResourceMetrics, null,
            TimeSpan.FromSeconds(30), TimeSpan.FromSeconds(30));

        _logger.LogInformation("PerformanceMonitorService initialized with OpenTelemetry");
    }

    public Activity? StartActivity(string name, params (string Key, object? Value)[] tags)
    {
        if (_disposed) return null;

        try
        {
            var activity = _activitySource.StartActivity(name);
            if (activity != null)
            {
                foreach (var (key, value) in tags)
                {
                    activity.SetTag(key, value?.ToString());
                }

                _logger.LogTrace("Started activity: {ActivityName} with {TagCount} tags", name, tags.Length);
            }

            return activity;
        }
        catch (Exception ex)
        {
            _logger.LogWarning(ex, "Failed to start activity: {ActivityName}", name);
            return null;
        }
    }

    public void RecordChunkingMetrics(string strategy, double qualityScore, int chunkCount, TimeSpan processingTime)
    {
        if (_disposed) return;

        ArgumentException.ThrowIfNullOrEmpty(strategy);
        ArgumentOutOfRangeException.ThrowIfNegative(qualityScore);
        ArgumentOutOfRangeException.ThrowIfNegative(chunkCount);

        try
        {
            // 메트릭 업데이트
            var metrics = _chunkingMetrics.AddOrUpdate(strategy,
                new ChunkingMetrics
                {
                    Strategy = strategy,
                    TotalRequests = 1,
                    TotalChunks = chunkCount,
                    TotalProcessingTime = processingTime,
                    QualityScores = new List<double> { qualityScore },
                    LastUpdated = DateTime.UtcNow
                },
                (key, existing) => new ChunkingMetrics
                {
                    Strategy = strategy,
                    TotalRequests = existing.TotalRequests + 1,
                    TotalChunks = existing.TotalChunks + chunkCount,
                    TotalProcessingTime = existing.TotalProcessingTime.Add(processingTime),
                    QualityScores = existing.QualityScores.Concat(new[] { qualityScore }).ToList(),
                    LastUpdated = DateTime.UtcNow
                });

            // OpenTelemetry 메트릭 기록
            _requestCounter.Add(1,
                new KeyValuePair<string, object?>("strategy", strategy),
                new KeyValuePair<string, object?>("operation", "chunking"));

            _processingTimeHistogram.Record(processingTime.TotalMilliseconds,
                new KeyValuePair<string, object?>("strategy", strategy),
                new KeyValuePair<string, object?>("operation", "chunking"));

            _chunkQualityHistogram.Record(qualityScore,
                new KeyValuePair<string, object?>("strategy", strategy));

            _logger.LogTrace("Recorded chunking metrics: Strategy={Strategy}, Quality={Quality:P2}, Chunks={ChunkCount}, Time={ProcessingTime}ms",
                strategy, qualityScore, chunkCount, processingTime.TotalMilliseconds);
        }
        catch (Exception ex)
        {
            _logger.LogWarning(ex, "Failed to record chunking metrics for strategy: {Strategy}", strategy);
        }
    }

    public void RecordProcessingMetrics(string operation, TimeSpan duration, bool success, string? errorMessage = null)
    {
        if (_disposed) return;

        ArgumentException.ThrowIfNullOrEmpty(operation);

        try
        {
            // 메트릭 업데이트
            var metrics = _processingMetrics.AddOrUpdate(operation,
                new ProcessingMetrics
                {
                    Operation = operation,
                    TotalRequests = 1,
                    SuccessfulRequests = success ? 1 : 0,
                    TotalDuration = duration,
                    Errors = success ? new List<string>() : new List<string> { errorMessage ?? "Unknown error" },
                    LastUpdated = DateTime.UtcNow
                },
                (key, existing) => new ProcessingMetrics
                {
                    Operation = operation,
                    TotalRequests = existing.TotalRequests + 1,
                    SuccessfulRequests = existing.SuccessfulRequests + (success ? 1 : 0),
                    TotalDuration = existing.TotalDuration.Add(duration),
                    Errors = success ? existing.Errors : existing.Errors.Concat(new[] { errorMessage ?? "Unknown error" }).ToList(),
                    LastUpdated = DateTime.UtcNow
                });

            // OpenTelemetry 메트릭 기록
            _requestCounter.Add(1,
                new KeyValuePair<string, object?>("operation", operation),
                new KeyValuePair<string, object?>("success", success));

            if (!success)
            {
                _errorCounter.Add(1,
                    new KeyValuePair<string, object?>("operation", operation),
                    new KeyValuePair<string, object?>("error", errorMessage ?? "Unknown"));
            }

            _processingTimeHistogram.Record(duration.TotalMilliseconds,
                new KeyValuePair<string, object?>("operation", operation),
                new KeyValuePair<string, object?>("success", success));

            _logger.LogTrace("Recorded processing metrics: Operation={Operation}, Success={Success}, Duration={Duration}ms",
                operation, success, duration.TotalMilliseconds);
        }
        catch (Exception ex)
        {
            _logger.LogWarning(ex, "Failed to record processing metrics for operation: {Operation}", operation);
        }
    }

    public void RecordResourceUsage(string resource, double value, string unit = "count")
    {
        if (_disposed) return;

        ArgumentException.ThrowIfNullOrEmpty(resource);
        ArgumentOutOfRangeException.ThrowIfNegative(value);

        try
        {
            // 리소스 메트릭 업데이트
            var metrics = _resourceMetrics.AddOrUpdate(resource,
                new ResourceMetrics
                {
                    Resource = resource,
                    Values = new List<double> { value },
                    Unit = unit,
                    LastUpdated = DateTime.UtcNow
                },
                (key, existing) => new ResourceMetrics
                {
                    Resource = resource,
                    Values = existing.Values.Concat(new[] { value }).ToList(),
                    Unit = unit,
                    LastUpdated = DateTime.UtcNow
                });

            _logger.LogTrace("Recorded resource usage: Resource={Resource}, Value={Value} {Unit}",
                resource, value, unit);
        }
        catch (Exception ex)
        {
            _logger.LogWarning(ex, "Failed to record resource usage for: {Resource}", resource);
        }
    }

    public async Task<PerformanceStatistics> GetStatisticsAsync()
    {
        if (_disposed) return new PerformanceStatistics();

        try
        {
            var statistics = new PerformanceStatistics
            {
                CollectionPeriod = TimeSpan.FromHours(1), // 기본 1시간
                LastUpdated = DateTime.UtcNow,

                // 청킹 메트릭 집계
                ChunkingStatistics = _chunkingMetrics.Values.ToDictionary(
                    m => m.Strategy,
                    m => new ChunkingStatistics
                    {
                        TotalRequests = m.TotalRequests,
                        AverageQualityScore = m.QualityScores.Any() ? m.QualityScores.Average() : 0,
                        AverageChunksPerRequest = m.TotalRequests > 0 ? (double)m.TotalChunks / m.TotalRequests : 0,
                        AverageProcessingTime = m.TotalRequests > 0 ?
                            TimeSpan.FromTicks(m.TotalProcessingTime.Ticks / m.TotalRequests) : TimeSpan.Zero,
                        QualityScoreStandardDeviation = CalculateStandardDeviation(m.QualityScores)
                    }),

                // 처리 메트릭 집계
                ProcessingStatistics = _processingMetrics.Values.ToDictionary(
                    m => m.Operation,
                    m => new ProcessingStatistics
                    {
                        TotalRequests = m.TotalRequests,
                        SuccessfulRequests = m.SuccessfulRequests,
                        ErrorRate = m.TotalRequests > 0 ? (double)(m.TotalRequests - m.SuccessfulRequests) / m.TotalRequests : 0,
                        AverageDuration = m.TotalRequests > 0 ?
                            TimeSpan.FromTicks(m.TotalDuration.Ticks / m.TotalRequests) : TimeSpan.Zero,
                        RecentErrors = m.Errors.TakeLast(10).ToList()
                    }),

                // 리소스 메트릭 집계
                ResourceStatistics = _resourceMetrics.Values.ToDictionary(
                    m => m.Resource,
                    m => new ResourceStatistics
                    {
                        CurrentValue = m.Values.LastOrDefault(),
                        AverageValue = m.Values.Any() ? m.Values.Average() : 0,
                        MaxValue = m.Values.Any() ? m.Values.Max() : 0,
                        MinValue = m.Values.Any() ? m.Values.Min() : 0,
                        Unit = m.Unit,
                        StandardDeviation = CalculateStandardDeviation(m.Values)
                    }),

                // 전체 시스템 메트릭
                SystemMetrics = await GetSystemMetricsAsync()
            };

            _logger.LogDebug("Generated performance statistics with {ChunkingStrategies} chunking strategies, {Operations} operations",
                statistics.ChunkingStatistics.Count, statistics.ProcessingStatistics.Count);

            return statistics;
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Failed to generate performance statistics");
            return new PerformanceStatistics();
        }
    }

    #region Private Methods


    private void CollectResourceMetrics(object? state)
    {
        if (_disposed) return;

        try
        {
            // GC 메트릭
            var totalMemory = GC.GetTotalMemory(false);
            RecordResourceUsage("memory_total_bytes", totalMemory, "bytes");

            var gen0Collections = GC.CollectionCount(0);
            var gen1Collections = GC.CollectionCount(1);
            var gen2Collections = GC.CollectionCount(2);

            RecordResourceUsage("gc_gen0_collections", gen0Collections, "count");
            RecordResourceUsage("gc_gen1_collections", gen1Collections, "count");
            RecordResourceUsage("gc_gen2_collections", gen2Collections, "count");

            // 스레드 풀 메트릭
            ThreadPool.GetAvailableThreads(out int workerThreads, out int completionPortThreads);
            ThreadPool.GetMaxThreads(out int maxWorkerThreads, out int maxCompletionPortThreads);

            RecordResourceUsage("threadpool_worker_threads_available", workerThreads, "count");
            RecordResourceUsage("threadpool_completion_port_threads_available", completionPortThreads, "count");
            RecordResourceUsage("threadpool_worker_threads_used", maxWorkerThreads - workerThreads, "count");

            // 프로세스 메트릭
            using var process = Process.GetCurrentProcess();
            RecordResourceUsage("process_working_set_bytes", process.WorkingSet64, "bytes");
            RecordResourceUsage("process_private_memory_bytes", process.PrivateMemorySize64, "bytes");
            RecordResourceUsage("process_virtual_memory_bytes", process.VirtualMemorySize64, "bytes");

            _logger.LogTrace("Collected resource metrics successfully");
        }
        catch (Exception ex)
        {
            _logger.LogWarning(ex, "Failed to collect resource metrics");
        }
    }

    private async Task<WebFlux.Core.Interfaces.SystemMetrics> GetSystemMetricsAsync()
    {
        try
        {
            using var process = Process.GetCurrentProcess();

            return new WebFlux.Core.Interfaces.SystemMetrics
            {
                TotalMemoryBytes = GC.GetTotalMemory(false),
                WorkingSetBytes = process.WorkingSet64,
                CpuUsagePercent = GetCpuUsage(),
                ActiveThreads = process.Threads.Count,
                GCCollections = new Dictionary<string, long>
                {
                    { "Gen0", GC.CollectionCount(0) },
                    { "Gen1", GC.CollectionCount(1) },
                    { "Gen2", GC.CollectionCount(2) }
                }
            };
        }
        catch (Exception ex)
        {
            _logger.LogWarning(ex, "Failed to get system metrics");
            return new WebFlux.Core.Interfaces.SystemMetrics();
        }
    }

    private double GetCpuUsage()
    {
        // 간단한 CPU 사용률 계산 (실제 환경에서는 더 정교한 방법 사용)
        try
        {
            using var process = Process.GetCurrentProcess();
            return process.TotalProcessorTime.TotalMilliseconds / Environment.ProcessorCount / 1000.0;
        }
        catch
        {
            return 0.0;
        }
    }

    private double CalculateStandardDeviation(IEnumerable<double> values)
    {
        var list = values.ToList();
        if (list.Count <= 1) return 0.0;

        var mean = list.Average();
        var variance = list.Average(x => Math.Pow(x - mean, 2));
        return Math.Sqrt(variance);
    }

    /// <summary>
    /// 메트릭 카운터 증가
    /// </summary>
    public void IncrementCounter(string name, long value = 1, params (string Key, object? Value)[] tags)
    {
        ArgumentException.ThrowIfNullOrEmpty(name);

        try
        {
            var counter = _meter.CreateCounter<long>(name);
            var tagList = CreateTagList(tags);
            counter.Add(value, tagList);

            _logger.LogTrace("Counter incremented: {Name} += {Value}", name, value);
        }
        catch (Exception ex)
        {
            _logger.LogWarning(ex, "Failed to increment counter: {Name}", name);
        }
    }

    /// <summary>
    /// 메트릭 히스토그램 기록
    /// </summary>
    public void RecordHistogram(string name, double value, params (string Key, object? Value)[] tags)
    {
        ArgumentException.ThrowIfNullOrEmpty(name);

        try
        {
            var histogram = _meter.CreateHistogram<double>(name);
            var tagList = CreateTagList(tags);
            histogram.Record(value, tagList);

            _logger.LogTrace("Histogram recorded: {Name} = {Value}", name, value);
        }
        catch (Exception ex)
        {
            _logger.LogWarning(ex, "Failed to record histogram: {Name}", name);
        }
    }

    /// <summary>
    /// 메트릭 게이지 설정
    /// </summary>
    public void SetGauge(string name, long value, params (string Key, object? Value)[] tags)
    {
        ArgumentException.ThrowIfNullOrEmpty(name);

        try
        {
            var gauge = _meter.CreateObservableGauge<long>(name, () => value);
            _logger.LogTrace("Gauge set: {Name} = {Value}", name, value);
        }
        catch (Exception ex)
        {
            _logger.LogWarning(ex, "Failed to set gauge: {Name}", name);
        }
    }

    /// <summary>
    /// 처리 시간 측정
    /// </summary>
    public IDisposable MeasureOperation(string operationName, params (string Key, object? Value)[] tags)
    {
        ArgumentException.ThrowIfNullOrEmpty(operationName);

        try
        {
            var activity = StartActivity(operationName, tags);
            return new OperationScope(this, operationName, activity);
        }
        catch (Exception ex)
        {
            _logger.LogWarning(ex, "Failed to start operation measurement: {Operation}", operationName);
            return new NullOperationScope();
        }
    }

    /// <summary>
    /// 에러 기록
    /// </summary>
    public void RecordError(Exception exception, string? context = null)
    {
        ArgumentNullException.ThrowIfNull(exception);

        try
        {
            var tags = new List<(string Key, object? Value)>
            {
                ("exception_type", exception.GetType().Name),
                ("message", exception.Message)
            };

            if (!string.IsNullOrEmpty(context))
            {
                tags.Add(("context", context));
            }

            IncrementCounter("webflux_errors_total", 1, tags.ToArray());

            _logger.LogTrace("Error recorded: {Exception} in {Context}", exception.GetType().Name, context);
        }
        catch (Exception ex)
        {
            _logger.LogWarning(ex, "Failed to record error");
        }
    }

    /// <summary>
    /// 캐시 메트릭 기록
    /// </summary>
    public void RecordCacheMetrics(string operation, bool hit, TimeSpan duration)
    {
        ArgumentException.ThrowIfNullOrEmpty(operation);

        try
        {
            var tags = new[]
            {
                ("operation", (object?)operation),
                ("hit", hit)
            };

            IncrementCounter("webflux_cache_operations_total", 1, tags);
            RecordHistogram("webflux_cache_operation_duration_ms", duration.TotalMilliseconds, tags);

            _logger.LogTrace("Cache metrics recorded: {Operation} hit={Hit} duration={Duration}ms",
                operation, hit, duration.TotalMilliseconds);
        }
        catch (Exception ex)
        {
            _logger.LogWarning(ex, "Failed to record cache metrics");
        }
    }

    /// <summary>
    /// 멀티모달 처리 메트릭 기록
    /// </summary>
    public void RecordMultimodalMetrics(int imageCount, double confidence, TimeSpan processingTime)
    {
        try
        {
            var tags = new[]
            {
                ("image_count", (object?)imageCount),
                ("confidence", confidence)
            };

            RecordHistogram("webflux_multimodal_processing_duration_ms", processingTime.TotalMilliseconds, tags);
            RecordHistogram("webflux_multimodal_confidence_score", confidence, tags);

            _logger.LogTrace("Multimodal metrics recorded: {ImageCount} images, {Confidence} confidence, {Duration}ms",
                imageCount, confidence, processingTime.TotalMilliseconds);
        }
        catch (Exception ex)
        {
            _logger.LogWarning(ex, "Failed to record multimodal metrics");
        }
    }

    /// <summary>
    /// 크롤링 메트릭 기록
    /// </summary>
    public void RecordCrawlingMetrics(string strategy, string url, bool success, long contentLength, TimeSpan responseTime)
    {
        ArgumentException.ThrowIfNullOrEmpty(strategy);
        ArgumentException.ThrowIfNullOrEmpty(url);

        try
        {
            var tags = new[]
            {
                ("strategy", (object?)strategy),
                ("success", success),
                ("domain", new Uri(url).Host)
            };

            IncrementCounter("webflux_crawling_requests_total", 1, tags);
            RecordHistogram("webflux_crawling_response_time_ms", responseTime.TotalMilliseconds, tags);
            RecordHistogram("webflux_crawling_content_length_bytes", contentLength, tags);

            _logger.LogTrace("Crawling metrics recorded: {Strategy} {Url} success={Success} length={Length}b time={Time}ms",
                strategy, url, success, contentLength, responseTime.TotalMilliseconds);
        }
        catch (Exception ex)
        {
            _logger.LogWarning(ex, "Failed to record crawling metrics");
        }
    }

    /// <summary>
    /// 시스템 리소스 메트릭 기록
    /// </summary>
    public void RecordSystemMetrics()
    {
        try
        {
            CollectResourceMetrics(null);
            _logger.LogTrace("System metrics collection triggered");
        }
        catch (Exception ex)
        {
            _logger.LogWarning(ex, "Failed to record system metrics");
        }
    }

    private TagList CreateTagList(params (string Key, object? Value)[] tags)
    {
        var tagList = new TagList();
        foreach (var (key, value) in tags)
        {
            tagList.Add(key, value);
        }
        return tagList;
    }

    #endregion

    public void Dispose()
    {
        if (_disposed) return;

        _disposed = true;

        try
        {
            _metricsCollectionTimer?.Dispose();
            _activitySource?.Dispose();
            _meter?.Dispose();

            _logger.LogInformation("PerformanceMonitorService disposed");
        }
        catch (Exception ex)
        {
            _logger.LogWarning(ex, "Error during PerformanceMonitorService disposal");
        }
    }
}

/// <summary>
/// 청킹 메트릭 내부 모델
/// </summary>
internal class ChunkingMetrics
{
    public string Strategy { get; set; } = string.Empty;
    public long TotalRequests { get; set; }
    public long TotalChunks { get; set; }
    public TimeSpan TotalProcessingTime { get; set; }
    public List<double> QualityScores { get; set; } = new();
    public DateTime LastUpdated { get; set; }
}

/// <summary>
/// 처리 메트릭 내부 모델
/// </summary>
internal class ProcessingMetrics
{
    public string Operation { get; set; } = string.Empty;
    public long TotalRequests { get; set; }
    public long SuccessfulRequests { get; set; }
    public TimeSpan TotalDuration { get; set; }
    public List<string> Errors { get; set; } = new();
    public DateTime LastUpdated { get; set; }
}

/// <summary>
/// 리소스 메트릭 내부 모델
/// </summary>
internal class ResourceMetrics
{
    public string Resource { get; set; } = string.Empty;
    public List<double> Values { get; set; } = new();
    public string Unit { get; set; } = string.Empty;
    public DateTime LastUpdated { get; set; }
}

/// <summary>
/// 작업 측정 범위 구현
/// </summary>
internal class OperationScope : IOperationScope
{
    private readonly PerformanceMonitorService _monitor;
    private readonly Activity? _activity;
    private readonly Stopwatch _stopwatch;
    private bool _disposed;

    public string OperationName { get; }
    public DateTimeOffset StartTime { get; }

    public OperationScope(PerformanceMonitorService monitor, string operationName, Activity? activity)
    {
        _monitor = monitor;
        OperationName = operationName;
        _activity = activity;
        StartTime = DateTimeOffset.UtcNow;
        _stopwatch = Stopwatch.StartNew();
    }

    public void AddTag(string key, object? value)
    {
        _activity?.SetTag(key, value?.ToString());
    }

    public void RecordError(Exception exception)
    {
        _monitor.RecordError(exception, OperationName);
        _activity?.SetStatus(ActivityStatusCode.Error, exception.Message);
    }

    public void Complete()
    {
        _activity?.SetStatus(ActivityStatusCode.Ok);
    }

    public void Dispose()
    {
        if (_disposed) return;
        _disposed = true;

        _stopwatch.Stop();
        _monitor.RecordHistogram($"{OperationName}_duration_ms", _stopwatch.Elapsed.TotalMilliseconds);
        _activity?.Dispose();
    }
}

/// <summary>
/// Null 패턴 구현
/// </summary>
internal class NullOperationScope : IDisposable
{
    public void Dispose() { }
}